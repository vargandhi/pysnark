# automatically generated by the FlatBuffers compiler, do not modify

# namespace: zkinterface

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A description of a circuit or sub-circuit.
# This can be a complete circuit ready for proving,
# or a part of a circuit being built.
class CircuitHeader(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CircuitHeader()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCircuitHeader(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CircuitHeaderBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x7A\x6B\x69\x66", size_prefixed=size_prefixed)

    # CircuitHeader
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Instance variables. This is also called public inputs to the circuit.
    #
    # - Variables are allocated by the sender of this message.
    # - The same structure must be provided for R1CS and witness generations.
    # - Values may be omitted in some contexts, such as in a preprocessing phase.
    # - During witness generation, variables must be assigned values.
    # - In the particular context of a gadget call, `instance_variables` holds the inputs
    #   to the gadget, i.e. variables allocated by the caller that the gadget can
    #   refer to. In the context of a gadget response, it holds the outputs of the gadget,
    #   i.e. variables allocated by the gadget that the caller can refer to.
    # CircuitHeader
    def InstanceVariables(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from zkinterface.Variables import Variables
            obj = Variables()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # A variable ID greater than all IDs allocated by the sender of this message.
    # The recipient of this message can allocate new IDs >= free_variable_id.
    # CircuitHeader
    def FreeVariableId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # The largest element of the finite field used by the current system.
    # A canonical little-endian representation of the field order minus one.
    # See `Variables.values` below.
    # CircuitHeader
    def FieldMaximum(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CircuitHeader
    def FieldMaximumAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CircuitHeader
    def FieldMaximumLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CircuitHeader
    def FieldMaximumIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Optional: Any custom parameter that may influence the circuit construction.
    #
    # Example: function_name, if a gadget supports multiple function variants.
    # Example: the depth of a Merkle tree.
    # Counter-example: a Merkle path is not config and belongs in `instance_variables.info`.
    # CircuitHeader
    def Configuration(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from zkinterface.KeyValue import KeyValue
            obj = KeyValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CircuitHeader
    def ConfigurationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CircuitHeader
    def ConfigurationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def CircuitHeaderStart(builder):
    builder.StartObject(4)

def Start(builder):
    CircuitHeaderStart(builder)

def CircuitHeaderAddInstanceVariables(builder, instanceVariables):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(instanceVariables), 0)

def AddInstanceVariables(builder, instanceVariables):
    CircuitHeaderAddInstanceVariables(builder, instanceVariables)

def CircuitHeaderAddFreeVariableId(builder, freeVariableId):
    builder.PrependUint64Slot(1, freeVariableId, 0)

def AddFreeVariableId(builder, freeVariableId):
    CircuitHeaderAddFreeVariableId(builder, freeVariableId)

def CircuitHeaderAddFieldMaximum(builder, fieldMaximum):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fieldMaximum), 0)

def AddFieldMaximum(builder, fieldMaximum):
    CircuitHeaderAddFieldMaximum(builder, fieldMaximum)

def CircuitHeaderStartFieldMaximumVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartFieldMaximumVector(builder, numElems: int) -> int:
    return CircuitHeaderStartFieldMaximumVector(builder, numElems)

def CircuitHeaderAddConfiguration(builder, configuration):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(configuration), 0)

def AddConfiguration(builder, configuration):
    CircuitHeaderAddConfiguration(builder, configuration)

def CircuitHeaderStartConfigurationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConfigurationVector(builder, numElems: int) -> int:
    return CircuitHeaderStartConfigurationVector(builder, numElems)

def CircuitHeaderEnd(builder):
    return builder.EndObject()

def End(builder):
    return CircuitHeaderEnd(builder)
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: zkinterface

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Optional: Command messages can be used to request actions from the receiver. This makes it
# possible to write code that works in different environments. Commands and parameters
# can be passed over the same byte stream as other messages; if so Command must be the first
# message. This reduces the need for environment-specific methods (it can replace CLI --flags, etc).
class Command(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Command()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCommand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CommandBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x7A\x6B\x69\x66", size_prefixed=size_prefixed)

    # Command
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # For gadget flows.
    # Request the generation of a constraint system (or part thereof).
    # If true, this must be followed by a CircuitHeader.
    # The response must be another CircuitHeader message with a greater `free_variable_id`
    # followed by one or more ConstraintSystem messages.
    # Command
    def ConstraintsGeneration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # For gadget flows.
    # Request the generation of a witness (or part thereof).
    # If true, this must be followed by a CircuitHeader, and the `instance_variables`
    # variables must contain input values.
    # The response must be another CircuitHeader message, with a greater `free_variable_id`,
    # with output values in `instance_variables`, followed by one or more `Witness` messages.
    # Command
    def WitnessGeneration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Optional: Any complementary parameter that may be useful.
    # Command
    def Parameters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from zkinterface.KeyValue import KeyValue
            obj = KeyValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Command
    def ParametersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Command
    def ParametersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def CommandStart(builder):
    builder.StartObject(3)

def Start(builder):
    CommandStart(builder)

def CommandAddConstraintsGeneration(builder, constraintsGeneration):
    builder.PrependBoolSlot(0, constraintsGeneration, 0)

def AddConstraintsGeneration(builder, constraintsGeneration):
    CommandAddConstraintsGeneration(builder, constraintsGeneration)

def CommandAddWitnessGeneration(builder, witnessGeneration):
    builder.PrependBoolSlot(1, witnessGeneration, 0)

def AddWitnessGeneration(builder, witnessGeneration):
    CommandAddWitnessGeneration(builder, witnessGeneration)

def CommandAddParameters(builder, parameters):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)

def AddParameters(builder, parameters):
    CommandAddParameters(builder, parameters)

def CommandStartParametersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartParametersVector(builder, numElems: int) -> int:
    return CommandStartParametersVector(builder, numElems)

def CommandEnd(builder):
    return builder.EndObject()

def End(builder):
    return CommandEnd(builder)

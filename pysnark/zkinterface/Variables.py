# automatically generated by the FlatBuffers compiler, do not modify

# namespace: zkinterface

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A description of multiple variables.
#
# - Each variable is identified by a numerical ID.
# - Each variable can be assigned a concrete value.
# - In `CircuitHeader.instance_variables`, the IDs indicate which variables are
#   meant to be shared as inputs or outputs of a sub-circuit.
# - During witness generation, the values form the assignment to the variables.
# - In `BilinearConstraint` linear combinations, the values are the coefficients
#   applied to variables in a linear combination.
class Variables(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Variables()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVariables(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def VariablesBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x7A\x6B\x69\x66", size_prefixed=size_prefixed)

    # Variables
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The IDs of the variables.
    #
    # - IDs must be unique within a constraint system.
    # - The ID 0 always represents the constant variable one.
    # Variables
    def VariableIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Variables
    def VariableIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # Variables
    def VariableIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Variables
    def VariableIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Optional: values assigned to variables.
    #
    # - Values are finite field elements as defined by `header.field_maximum`.
    # - Elements are represented in canonical little-endian form.
    # - Elements appear in the same order as variable_ids.
    # - Multiple elements are concatenated in a single byte array.
    # - The element representation may be truncated and its size shorter
    #   than `header.field_maximum`. Truncated bytes are treated as zeros.
    # - The size of an element representation is determined by:
    #
    #     element size = values.length / variable_ids.length
    # Variables
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Variables
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Variables
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Variables
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Optional: Any complementary info that may be useful to the recipient.
    #
    # Example: human-readable names.
    # Example: custom variable typing information (`is_bit`, ...).
    # Example: a Merkle authentication path in some custom format.
    # Variables
    def Info(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from zkinterface.KeyValue import KeyValue
            obj = KeyValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Variables
    def InfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Variables
    def InfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def VariablesStart(builder):
    builder.StartObject(3)

def Start(builder):
    VariablesStart(builder)

def VariablesAddVariableIds(builder, variableIds):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(variableIds), 0)

def AddVariableIds(builder, variableIds):
    VariablesAddVariableIds(builder, variableIds)

def VariablesStartVariableIdsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartVariableIdsVector(builder, numElems: int) -> int:
    return VariablesStartVariableIdsVector(builder, numElems)

def VariablesAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    VariablesAddValues(builder, values)

def VariablesStartValuesVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartValuesVector(builder, numElems: int) -> int:
    return VariablesStartValuesVector(builder, numElems)

def VariablesAddInfo(builder, info):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)

def AddInfo(builder, info):
    VariablesAddInfo(builder, info)

def VariablesStartInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInfoVector(builder, numElems: int) -> int:
    return VariablesStartInfoVector(builder, numElems)

def VariablesEnd(builder):
    return builder.EndObject()

def End(builder):
    return VariablesEnd(builder)